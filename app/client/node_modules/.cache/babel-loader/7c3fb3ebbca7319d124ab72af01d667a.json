{"ast":null,"code":"var _jsxFileName = \"/Users/stutivishwabhan/Desktop/validation-form/app/client/src/components/ValidationForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextInput from './TextInput';\nimport RadioInput from './RadioInput';\nimport CountrySelectInput from './CountrySelectInput';\nimport StateSelectInput from './StateSelectInput';\nimport DateInput from './DateInput';\nimport SubmitButton from './SubmitButton';\nimport { checkIsFieldValid } from '../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialFormValues = {\n  firstName: '',\n  lastName: '',\n  emailAddress: '',\n  streetAddress: '',\n  city: '',\n  state: '',\n  country: '',\n  zip: '',\n  phoneNumber: '',\n  dateOfBirth: new Date(),\n  gender: 'male'\n};\nconst genderOptions = [{\n  value: 'male',\n  label: 'Male'\n}, {\n  value: 'female',\n  label: 'Female'\n}, {\n  value: 'other',\n  label: 'Other'\n}];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    textAlign: '-webkit-center'\n  },\n  multipleItems: {\n    display: 'inline-flex',\n    justifyContent: 'center'\n  },\n  padLeft: {\n    marginLeft: '10px'\n  },\n  padRight: {\n    marginRight: '10px'\n  },\n  longTextField: {\n    width: '400px'\n  }\n}));\nconst initialState = {\n  response: '',\n  post: '',\n  responseToPost: ''\n};\n\nconst ValidationForm = () => {\n  _s();\n\n  const [values, setValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState({});\n  const classes = useStyles();\n  const [state, setState] = useState(initialState); // useEffect(() => {\n  //     callApi().then(res => setState({...state, responseToPost: res.express}))\n  //              .catch(err => console.log(err));\n  // })\n  // const callApi = async () => {\n  //     const response = await fetch('/api/hello');\n  //     const body = await response.json();\n  //     if (response.status !== 200) throw Error(body.message);\n  //     return body;\n  //   };\n\n  /**\n   * Checks if all form fields have valid entries\n   * Stores map (key=field, value=error message) in errors\n   * @param {*} fieldValues \n   * @returns boolean \n   */\n\n  const areFieldsValid = (fieldValues = values) => {\n    let validationState = {};\n    Object.keys(fieldValues).map(field => validationState[field] = checkIsFieldValid(field, fieldValues[field]));\n    setErrors({ ...validationState\n    });\n    return Object.values(validationState).every(i => i === \"\");\n  };\n  /**\n   * Alerts the user if all fields are valid\n   * @param {*} e \n   */\n\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // if (areFieldsValid()) {\n    //     alert('all fields valid');\n    // }\n\n    const response = await fetch('/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        validPost: areFieldsValid(),\n        post: values\n      })\n    });\n    const body = await response.text();\n    setState({ ...state,\n      responseToPost: body\n    });\n  };\n  /**\n   * Updates the field to its new value\n   * @param {*} e \n   */\n\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.root,\n      onSubmit: handleSubmit,\n      autoComplete: \"off\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Welcome!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          className: classes.multipleItems,\n          children: [/*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"First Name\",\n            name: \"firstName\",\n            value: values.firstName,\n            style: classes.padRight,\n            onChange: handleInputChange,\n            error: errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"Last Name\",\n            name: \"lastName\",\n            value: values.lastName,\n            onChange: handleInputChange,\n            error: errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"Email Address\",\n            name: \"emailAddress\",\n            value: values.emailAddress,\n            onChange: handleInputChange,\n            style: classes.longTextField,\n            error: errors.emailAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"Street Address\",\n            name: \"streetAddress\",\n            value: values.streetAddress,\n            onChange: handleInputChange,\n            style: classes.longTextField,\n            error: errors.streetAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          className: classes.multipleItems,\n          children: [/*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"City\",\n            name: \"city\",\n            value: values.city,\n            style: classes.padRight,\n            onChange: handleInputChange,\n            error: errors.city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StateSelectInput, {\n            name: \"state\",\n            value: values.state,\n            onChange: handleInputChange,\n            error: errors.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          className: classes.multipleItems,\n          children: [/*#__PURE__*/_jsxDEV(CountrySelectInput, {\n            name: \"country\",\n            value: values.country,\n            onChange: handleInputChange,\n            error: errors.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"Zip/Postal\",\n            name: \"zip\",\n            value: values.zip,\n            style: classes.padLeft,\n            onChange: handleInputChange,\n            error: errors.zip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"Phone Number\",\n            name: \"phoneNumber\",\n            value: values.phoneNumber,\n            onChange: handleInputChange,\n            error: errors.phoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(DateInput, {\n            label: \"Date of Birth\",\n            name: \"dateOfBirth\",\n            value: values.dateOfBirth,\n            onChange: handleInputChange,\n            error: errors.dateOfBirth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(RadioInput, {\n            label: \"Gender\",\n            name: \"gender\",\n            value: values.gender,\n            onChange: handleInputChange,\n            options: genderOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n            variant: \"outlined\",\n            size: \"medium\",\n            color: \"primary\",\n            text: \"Get my free samples\",\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center',\n        color: 'green'\n      },\n      children: state.responseToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ValidationForm, \"HhRZmPrV8lnhAOg2XoHc4ANRrMg=\", false, function () {\n  return [useStyles];\n});\n\n_c = ValidationForm;\nexport default ValidationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationForm\");","map":{"version":3,"sources":["/Users/stutivishwabhan/Desktop/validation-form/app/client/src/components/ValidationForm.js"],"names":["useState","useEffect","Grid","makeStyles","TextInput","RadioInput","CountrySelectInput","StateSelectInput","DateInput","SubmitButton","checkIsFieldValid","initialFormValues","firstName","lastName","emailAddress","streetAddress","city","state","country","zip","phoneNumber","dateOfBirth","Date","gender","genderOptions","value","label","useStyles","theme","root","flexGrow","textAlign","multipleItems","display","justifyContent","padLeft","marginLeft","padRight","marginRight","longTextField","width","initialState","response","post","responseToPost","ValidationForm","values","setValues","errors","setErrors","classes","setState","areFieldsValid","fieldValues","validationState","Object","keys","map","field","every","i","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","validPost","text","handleInputChange","name","target","color"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'; \nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextInput from './TextInput';\nimport RadioInput from './RadioInput';\nimport CountrySelectInput from './CountrySelectInput';\nimport StateSelectInput from './StateSelectInput';\nimport DateInput from './DateInput';\nimport SubmitButton from './SubmitButton';\nimport { checkIsFieldValid } from '../helpers';\n\nconst initialFormValues = {\n    firstName: '', \n    lastName: '', \n    emailAddress: '', \n    streetAddress: '', \n    city: '', \n    state: '',\n    country: '', \n    zip: '', \n    phoneNumber: '', \n    dateOfBirth: new Date(), \n    gender: 'male'\n}\n\nconst genderOptions = [\n    {value: 'male', label: 'Male'}, \n    {value: 'female', label: 'Female'}, \n    {value: 'other', label: 'Other'}\n]\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      textAlign: '-webkit-center',\n    },\n    multipleItems: {\n        display: 'inline-flex',\n        justifyContent: 'center', \n    },\n    padLeft: {\n        marginLeft: '10px',\n    }, \n    padRight: {\n        marginRight: '10px',\n    }, \n    longTextField: {\n        width: '400px',\n    }\n  }));\n\n  const initialState = {\n      response: '', \n      post: '', \n      responseToPost: '', \n  }\n\n\nconst ValidationForm = () => {\n    const [values, setValues] = useState(initialFormValues); \n    const [errors, setErrors] = useState({}); \n    const classes = useStyles(); \n\n    const [state, setState] = useState(initialState); \n\n    // useEffect(() => {\n    //     callApi().then(res => setState({...state, responseToPost: res.express}))\n    //              .catch(err => console.log(err));\n    // })\n\n    // const callApi = async () => {\n    //     const response = await fetch('/api/hello');\n    //     const body = await response.json();\n    //     if (response.status !== 200) throw Error(body.message);\n        \n    //     return body;\n    //   };\n\n    /**\n     * Checks if all form fields have valid entries\n     * Stores map (key=field, value=error message) in errors\n     * @param {*} fieldValues \n     * @returns boolean \n     */\n    const areFieldsValid = (fieldValues = values) => {\n        let validationState = {}; \n        Object.keys(fieldValues).map((field) => (\n            validationState[field] = checkIsFieldValid(field, fieldValues[field])\n        ))\n        setErrors({...validationState}); \n        return Object.values(validationState).every(i => i === \"\");\n    }\n\n    /**\n     * Alerts the user if all fields are valid\n     * @param {*} e \n     */\n    const handleSubmit = async (e) => {\n        e.preventDefault(); \n        // if (areFieldsValid()) {\n        //     alert('all fields valid');\n        // }\n        const response = await fetch('/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ validPost: areFieldsValid(), post: values }),\n          });\n        const body = await response.text();\n        \n        setState({ ...state, responseToPost: body });\n    }\n\n    /**\n     * Updates the field to its new value\n     * @param {*} e \n     */\n    const handleInputChange = (e) => {\n        const {name, value} = e.target; \n        setValues({\n            ...values,\n            [name]: value\n        });\n    }\n\n    return (\n    <>\n    {/* <p>{state.response}</p> */}\n    <form className={classes.root} onSubmit={handleSubmit} autoComplete=\"off\">\n    <Grid container spacing={2}>\n        <Grid item xs={12}> <h3>Welcome!</h3> </Grid>\n        <Grid item xs={12} className={classes.multipleItems}>\n            {/* First Name Text Field */}\n            <TextInput \n                label=\"First Name\" \n                name=\"firstName\"\n                value={values.firstName}\n                style={classes.padRight} \n                onChange={handleInputChange}\n                error={errors.firstName}\n            />\n            {/* Last Name Text Field */}\n            <TextInput \n                label=\"Last Name\" \n                name=\"lastName\"\n                value={values.lastName}\n                onChange={handleInputChange}\n                error={errors.lastName}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            {/* Email Address Text Field */}\n            <TextInput \n                label=\"Email Address\"\n                name=\"emailAddress\"\n                value={values.emailAddress}\n                onChange={handleInputChange}\n                style={classes.longTextField}\n                error={errors.emailAddress}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            {/* Street Address Text Field */}\n            <TextInput \n                label=\"Street Address\"\n                name=\"streetAddress\"\n                value={values.streetAddress}\n                onChange={handleInputChange}\n                style={classes.longTextField}\n                error={errors.streetAddress}\n            />\n        </Grid>\n        <Grid item xs={12} className={classes.multipleItems}>\n            {/* City Text Field */}\n            <TextInput \n                label=\"City\" \n                name=\"city\"\n                value={values.city}\n                style={classes.padRight}\n                onChange={handleInputChange}\n                error={errors.city}\n            />\n            {/* State Dropdown */}\n            <StateSelectInput \n                name=\"state\"\n                value={values.state}\n                onChange={handleInputChange}\n                error={errors.state}\n            />\n        </Grid>\n        <Grid item xs={12} className={classes.multipleItems}>\n            {/* Country Dropdown */}\n            <CountrySelectInput \n                name=\"country\"\n                value={values.country}\n                onChange={handleInputChange}\n                error={errors.country}\n            />\n            {/* Zip Code Text Field */}\n            <TextInput \n                label=\"Zip/Postal\" \n                name=\"zip\"\n                value={values.zip}\n                style={classes.padLeft}\n                onChange={handleInputChange}\n                error={errors.zip}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            {/* Phone Number Text Field */}\n            <TextInput \n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                value={values.phoneNumber}\n                onChange={handleInputChange}\n                error={errors.phoneNumber}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            {/* Date Picker */}\n            <DateInput \n                label=\"Date of Birth\"\n                name=\"dateOfBirth\"\n                value={values.dateOfBirth}\n                onChange={handleInputChange}\n                error={errors.dateOfBirth}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            {/* Gender Single Choice */}\n            <RadioInput \n                label=\"Gender\"\n                name=\"gender\"\n                value={values.gender}\n                onChange={handleInputChange}\n                options={genderOptions}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            {/* Submit Button */}\n            <SubmitButton \n                variant=\"outlined\"\n                size=\"medium\"\n                color=\"primary\"\n                text=\"Get my free samples\"\n                type=\"submit\"\n            />\n        </Grid>\n    </Grid>\n    </form>\n    <p style={{textAlign: 'center', color: 'green'}}>{state.responseToPost}</p>\n    </>\n)\n}\n\nexport default ValidationForm; "]},"metadata":{},"sourceType":"module"}