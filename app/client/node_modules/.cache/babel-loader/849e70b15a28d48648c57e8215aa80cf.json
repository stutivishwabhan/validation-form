{"ast":null,"code":"/**\n * Depending on the form field, not all events returned are in the format\n * of { target : {name: name, value: value } }\n * \n * This function takes the name of the field and its updated value \n * and converts it into the target object to pass in as a proper parameter to the \n * handleInputChange function \n * @param {form field} name \n * @param {the updated value to set the form field} value \n * @returns an object called target with a name and value\n */\nexport const convertEventParameter = (name, value) => ({\n  target: {\n    name,\n    value\n  }\n});\n/*\n    Emails are a collection of nearly any series of characters\n    followed by an @\n    another series of characters\n    followed by a .\n    another series of characters \n*/\n\nconst emailRegex = /.+@.+\\..+/;\n/* \n    US zip codes are either 5 digits or 9 digits (with a dash) \n    example: 12345 or 12345-6789\n*/\n\nconst usZipRegex = /^[0-9]{5}(?:-[0-9]{4})?$/;\n/*\n    US phone numbers can include the country code +1 \n    Area code is pretty much required nowadays - 3 digits (can be encapsulated with parenthesis)\n    Followed by 3 digits \n    Can include a marker which can be a dash, a period, or a space\n    Followed by 4 digits \n    Can include an extension that can be represented by x, ex, ext, extension, or a space \n    Can include a period or additional spaces following extension\n    Followed by unlimited digits \n*/\n\nconst usPhoneNumberRegex = /^(\\+?1)?[-.\\s]?\\(?(\\d{3,3})[)-.\\s]{0,2}(\\d{3,3})[-.\\s]?(\\d{4,4})\\s*((x|ex|ext|extension|\\s)\\.?\\s*\\d+)?$/;\nconst usPhoneNumberMinLength = 10;\nconst requiredFields = new Set(['firstName', 'lastName', 'emailAddress', 'streetAddress', 'city', 'state', 'country', 'zip', 'phoneNumber', 'dateOfBirth']);\n/**\n * Tests email against regex\n * @param {*} email \n * @returns string\n */\n\nconst checkIsValidEmail = email => {\n  if (!emailRegex.test(email)) {\n    return \"Email is invalid\";\n  }\n\n  return \"\";\n};\n/**\n * Tests zip against regex\n * @param {*} zip \n * @returns string\n */\n\n\nconst checkIsValidUsZip = zip => {\n  if (!usZipRegex.test(zip)) {\n    return \"Zip code is invalid\";\n  }\n\n  return \"\";\n};\n/**\n * Tests phoneNumber against length requirement and regex\n * @param {*} phoneNumber \n * @returns string\n */\n\n\nconst checkIsValidUsPhoneNumber = phoneNumber => {\n  if (phoneNumber.length < usPhoneNumberMinLength) {\n    return \"Phone number must be at least 10 digits\";\n  } else if (!usPhoneNumberRegex.test(phoneNumber)) {\n    return \"Phone number is invalid\";\n  }\n\n  return \"\";\n};\n/**\n * Tests if fields are valid by checking against required ones\n * and against individual field functions\n * @param {*} field \n * @param {*} fieldValue \n * @returns string\n */\n\n\nexport const checkIsFieldValid = (field, fieldValue) => {\n  if (requiredFields.has(field) && !(fieldValue && fieldValue.length !== 0)) {\n    return \"This field is required\";\n  } else if (field === 'emailAddress') {\n    return checkIsValidEmail(fieldValue);\n  } else if (field === 'zip') {\n    return checkIsValidUsZip(fieldValue);\n  } else if (field === 'phoneNumber') {\n    return checkIsValidUsPhoneNumber(fieldValue);\n  } else {\n    return \"\";\n  }\n};","map":{"version":3,"sources":["/Users/stutivishwabhan/Desktop/validation-form/app/client/src/helpers.js"],"names":["convertEventParameter","name","value","target","emailRegex","usZipRegex","usPhoneNumberRegex","usPhoneNumberMinLength","requiredFields","Set","checkIsValidEmail","email","test","checkIsValidUsZip","zip","checkIsValidUsPhoneNumber","phoneNumber","length","checkIsFieldValid","field","fieldValue","has"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,GAAG,CAACC,IAAD,EAAOC,KAAP,MAAkB;AACnDC,EAAAA,MAAM,EAAE;AACJF,IAAAA,IADI;AACEC,IAAAA;AADF;AAD2C,CAAlB,CAA9B;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,UAAU,GAAG,WAAnB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,0BAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,yGAA3B;AACA,MAAMC,sBAAsB,GAAG,EAA/B;AAEA,MAAMC,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAC3B,WAD2B,EAE3B,UAF2B,EAG3B,cAH2B,EAI3B,eAJ2B,EAK3B,MAL2B,EAM3B,OAN2B,EAO3B,SAP2B,EAQ3B,KAR2B,EAS3B,aAT2B,EAU3B,aAV2B,CAAR,CAAvB;AAaA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,MAAI,CAACP,UAAU,CAACQ,IAAX,CAAgBD,KAAhB,CAAL,EAA6B;AACzB,WAAO,kBAAP;AACH;;AACD,SAAO,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACA,MAAME,iBAAiB,GAAIC,GAAD,IAAS;AAC/B,MAAI,CAACT,UAAU,CAACO,IAAX,CAAgBE,GAAhB,CAAL,EAA2B;AACvB,WAAO,qBAAP;AACH;;AACD,SAAO,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,yBAAyB,GAAIC,WAAD,IAAiB;AAC/C,MAAIA,WAAW,CAACC,MAAZ,GAAqBV,sBAAzB,EAAiD;AAC7C,WAAO,yCAAP;AACH,GAFD,MAEO,IAAI,CAACD,kBAAkB,CAACM,IAAnB,CAAwBI,WAAxB,CAAL,EAA2C;AAC9C,WAAO,yBAAP;AACH;;AACD,SAAO,EAAP;AACH,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAME,iBAAiB,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACpD,MAAIZ,cAAc,CAACa,GAAf,CAAmBF,KAAnB,KAA6B,EAAEC,UAAU,IAAIA,UAAU,CAACH,MAAX,KAAsB,CAAtC,CAAjC,EAA2E;AACvE,WAAO,wBAAP;AACH,GAFD,MAEO,IAAIE,KAAK,KAAK,cAAd,EAA8B;AACjC,WAAOT,iBAAiB,CAACU,UAAD,CAAxB;AACH,GAFM,MAEA,IAAID,KAAK,KAAK,KAAd,EAAqB;AACxB,WAAON,iBAAiB,CAACO,UAAD,CAAxB;AACH,GAFM,MAEA,IAAID,KAAK,KAAK,aAAd,EAA6B;AAChC,WAAOJ,yBAAyB,CAACK,UAAD,CAAhC;AACH,GAFM,MAEA;AACH,WAAO,EAAP;AACH;AACJ,CAZM","sourcesContent":["\n/**\n * Depending on the form field, not all events returned are in the format\n * of { target : {name: name, value: value } }\n * \n * This function takes the name of the field and its updated value \n * and converts it into the target object to pass in as a proper parameter to the \n * handleInputChange function \n * @param {form field} name \n * @param {the updated value to set the form field} value \n * @returns an object called target with a name and value\n */\nexport const convertEventParameter = (name, value) => ({\n    target: {\n        name, value\n    }\n})\n\n/*\n    Emails are a collection of nearly any series of characters\n    followed by an @\n    another series of characters\n    followed by a .\n    another series of characters \n*/\nconst emailRegex = /.+@.+\\..+/;\n\n/* \n    US zip codes are either 5 digits or 9 digits (with a dash) \n    example: 12345 or 12345-6789\n*/\nconst usZipRegex = /^[0-9]{5}(?:-[0-9]{4})?$/;\n\n/*\n    US phone numbers can include the country code +1 \n    Area code is pretty much required nowadays - 3 digits (can be encapsulated with parenthesis)\n    Followed by 3 digits \n    Can include a marker which can be a dash, a period, or a space\n    Followed by 4 digits \n    Can include an extension that can be represented by x, ex, ext, extension, or a space \n    Can include a period or additional spaces following extension\n    Followed by unlimited digits \n*/\nconst usPhoneNumberRegex = /^(\\+?1)?[-.\\s]?\\(?(\\d{3,3})[)-.\\s]{0,2}(\\d{3,3})[-.\\s]?(\\d{4,4})\\s*((x|ex|ext|extension|\\s)\\.?\\s*\\d+)?$/; \nconst usPhoneNumberMinLength = 10; \n\nconst requiredFields = new Set([\n    'firstName', \n    'lastName', \n    'emailAddress', \n    'streetAddress', \n    'city', \n    'state', \n    'country', \n    'zip', \n    'phoneNumber', \n    'dateOfBirth'\n])\n\n/**\n * Tests email against regex\n * @param {*} email \n * @returns string\n */\nconst checkIsValidEmail = (email) => {\n    if (!emailRegex.test(email)) {\n        return \"Email is invalid\"; \n    } \n    return \"\"; \n}\n\n/**\n * Tests zip against regex\n * @param {*} zip \n * @returns string\n */\nconst checkIsValidUsZip = (zip) => {\n    if (!usZipRegex.test(zip)) {\n        return \"Zip code is invalid\"; \n    }\n    return \"\"; \n}\n\n/**\n * Tests phoneNumber against length requirement and regex\n * @param {*} phoneNumber \n * @returns string\n */\nconst checkIsValidUsPhoneNumber = (phoneNumber) => {\n    if (phoneNumber.length < usPhoneNumberMinLength) {\n        return \"Phone number must be at least 10 digits\"; \n    } else if (!usPhoneNumberRegex.test(phoneNumber)) {\n        return \"Phone number is invalid\"; \n    }\n    return \"\"; \n}\n\n/**\n * Tests if fields are valid by checking against required ones\n * and against individual field functions\n * @param {*} field \n * @param {*} fieldValue \n * @returns string\n */\nexport const checkIsFieldValid = (field, fieldValue) => {\n    if (requiredFields.has(field) && !(fieldValue && fieldValue.length !== 0)) {\n        return \"This field is required\"; \n    } else if (field === 'emailAddress') {\n        return checkIsValidEmail(fieldValue); \n    } else if (field === 'zip') {\n        return checkIsValidUsZip(fieldValue); \n    } else if (field === 'phoneNumber') {\n        return checkIsValidUsPhoneNumber(fieldValue); \n    } else {\n        return \"\"; \n    }\n}"]},"metadata":{},"sourceType":"module"}