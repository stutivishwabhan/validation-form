{"ast":null,"code":"/**\n * Depending on the form field, not all events returned are in the format\n * of { target : {name: name, value: value } }\n * \n * This function takes the name of the field and its updated value \n * and converts it into the target object to pass in as a proper parameter to the \n * handleInputChange function \n * @param {form field} name \n * @param {the updated value to set the form field} value \n * @returns an object called target with a name and value\n */\nexport const convertEventParameter = (name, value) => ({\n  target: {\n    name,\n    value\n  }\n});\nconst requiredFields = new Set(['firstName', 'lastName', 'emailAddress', 'streetAddress', 'city', 'state', 'country', 'zip', 'phoneNumber', 'dateOfBirth']);\nexport const checkIfFieldHasValue = (field, fieldValue) => {\n  if (requiredFields.has(field) && fieldValue && fieldValue.length !== 0) {\n    return \"\";\n  } else {\n    return \"This field is required\";\n  }\n};","map":{"version":3,"sources":["/Users/stutivishwabhan/Desktop/validation-form/app/src/helpers.js"],"names":["convertEventParameter","name","value","target","requiredFields","Set","checkIfFieldHasValue","field","fieldValue","has","length"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,GAAG,CAACC,IAAD,EAAOC,KAAP,MAAkB;AACnDC,EAAAA,MAAM,EAAE;AACJF,IAAAA,IADI;AACEC,IAAAA;AADF;AAD2C,CAAlB,CAA9B;AAMP,MAAME,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAC3B,WAD2B,EAE3B,UAF2B,EAG3B,cAH2B,EAI3B,eAJ2B,EAK3B,MAL2B,EAM3B,OAN2B,EAO3B,SAP2B,EAQ3B,KAR2B,EAS3B,aAT2B,EAU3B,aAV2B,CAAR,CAAvB;AAaA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACvD,MAAIJ,cAAc,CAACK,GAAf,CAAmBF,KAAnB,KAA6BC,UAA7B,IAA2CA,UAAU,CAACE,MAAX,KAAsB,CAArE,EAAwE;AACpE,WAAO,EAAP;AACH,GAFD,MAEO;AACH,WAAO,wBAAP;AACH;AACJ,CANM","sourcesContent":["\n/**\n * Depending on the form field, not all events returned are in the format\n * of { target : {name: name, value: value } }\n * \n * This function takes the name of the field and its updated value \n * and converts it into the target object to pass in as a proper parameter to the \n * handleInputChange function \n * @param {form field} name \n * @param {the updated value to set the form field} value \n * @returns an object called target with a name and value\n */\nexport const convertEventParameter = (name, value) => ({\n    target: {\n        name, value\n    }\n})\n\nconst requiredFields = new Set([\n    'firstName', \n    'lastName', \n    'emailAddress', \n    'streetAddress', \n    'city', \n    'state', \n    'country', \n    'zip', \n    'phoneNumber', \n    'dateOfBirth'\n])\n\nexport const checkIfFieldHasValue = (field, fieldValue) => {\n    if (requiredFields.has(field) && fieldValue && fieldValue.length !== 0) {\n        return \"\"; \n    } else {\n        return \"This field is required\"; \n    }\n}"]},"metadata":{},"sourceType":"module"}