{"ast":null,"code":"var _jsxFileName = \"/Users/stutivishwabhan/Desktop/validation-form/app/src/components/CountrySelectInput.js\";\nimport { makeStyles, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport React from 'react';\nimport { countryOptions, countryToFlag } from './Countries'; // import SelectInput from './SelectInput'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countryUseStyles = makeStyles({\n  option: {\n    fontSize: 15,\n    '& > span': {\n      marginRight: 10,\n      fontSize: 18\n    }\n  }\n});\n\nconst convertEventParameter = (name, value) => ({\n  target: {\n    name,\n    value\n  }\n});\n\nexport default function CountrySelectInput(props) {\n  const {\n    name,\n    value,\n    onChange,\n    error\n  } = props;\n  const countryClasses = countryUseStyles();\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    style: {\n      width: 300\n    },\n    options: countryOptions,\n    classes: {\n      option: countryClasses.option\n    },\n    autoHighlight: true,\n    getOptionSelected: (option, value) => option.label === value.label,\n    getOptionLabel: option => option.label || \"\",\n    renderOption: option => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: countryToFlag(option.code)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), option.label, \" (\", option.code, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this),\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Choose a country/region\",\n      variant: \"outlined\",\n      ...(error && {\n        error: true,\n        helperText: error\n      }),\n      inputProps: { ...params.inputProps,\n        autoComplete: 'new-password' // disable autocomplete and autofill\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this),\n    onChange: (e, v) => onChange(convertEventParameter(name, v ? v.label : ''))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_c = CountrySelectInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountrySelectInput\");","map":{"version":3,"sources":["/Users/stutivishwabhan/Desktop/validation-form/app/src/components/CountrySelectInput.js"],"names":["makeStyles","TextField","Autocomplete","React","countryOptions","countryToFlag","countryUseStyles","option","fontSize","marginRight","convertEventParameter","name","value","target","CountrySelectInput","props","onChange","error","countryClasses","width","label","code","params","helperText","inputProps","autoComplete","e","v"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,mBAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,aAA9C,C,CACA;;;AAEA,MAAMC,gBAAgB,GAAGN,UAAU,CAAC;AAChCO,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ,EAAE,EADN;AAEJ,gBAAY;AACZC,MAAAA,WAAW,EAAE,EADD;AAEZD,MAAAA,QAAQ,EAAE;AAFE;AAFR;AADwB,CAAD,CAAnC;;AAUA,MAAME,qBAAqB,GAAG,CAACC,IAAD,EAAOC,KAAP,MAAkB;AAC5CC,EAAAA,MAAM,EAAE;AACJF,IAAAA,IADI;AACEC,IAAAA;AADF;AADoC,CAAlB,CAA9B;;AAMA,eAAe,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AAC9C,QAAM;AAACJ,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcI,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAiCF,KAAvC;AACA,QAAMG,cAAc,GAAGZ,gBAAgB,EAAvC;AACA,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAE;AAACa,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,OAAO,EAAEf,cAFb;AAGI,IAAA,OAAO,EAAE;AAACG,MAAAA,MAAM,EAAEW,cAAc,CAACX;AAAxB,KAHb;AAII,IAAA,aAAa,MAJjB;AAKI,IAAA,iBAAiB,EAAE,CAACA,MAAD,EAASK,KAAT,KAAmBL,MAAM,CAACa,KAAP,KAAiBR,KAAK,CAACQ,KALjE;AAMI,IAAA,cAAc,EAAGb,MAAD,IAAYA,MAAM,CAACa,KAAP,IAAgB,EANhD;AAOI,IAAA,YAAY,EAAGb,MAAD,iBACV,QAAC,KAAD,CAAO,QAAP;AAAA,8BACI;AAAA,kBAAOF,aAAa,CAACE,MAAM,CAACc,IAAR;AAApB;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKd,MAAM,CAACa,KAFZ,QAEqBb,MAAM,CAACc,IAF5B;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAYI,IAAA,WAAW,EAAGC,MAAD,iBACT,QAAC,SAAD,OACQA,MADR;AAEI,MAAA,KAAK,EAAC,yBAFV;AAGI,MAAA,OAAO,EAAC,UAHZ;AAAA,UAISL,KAAD,IAAW;AAACA,QAAAA,KAAK,EAAE,IAAR;AAAcM,QAAAA,UAAU,EAAEN;AAA1B,OAJnB;AAKI,MAAA,UAAU,EAAE,EACR,GAAGK,MAAM,CAACE,UADF;AAERC,QAAAA,YAAY,EAAE,cAFN,CAEsB;;AAFtB;AALhB;AAAA;AAAA;AAAA;AAAA,YAbR;AAuBI,IAAA,QAAQ,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUX,QAAQ,CAACN,qBAAqB,CAACC,IAAD,EAAOgB,CAAC,GAAGA,CAAC,CAACP,KAAL,GAAY,EAApB,CAAtB;AAvBhC;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH;KA9BuBN,kB","sourcesContent":["import { makeStyles, TextField } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab';\nimport React from 'react'\nimport { countryOptions, countryToFlag } from './Countries'\n// import SelectInput from './SelectInput'\n\nconst countryUseStyles = makeStyles({\n    option: {\n        fontSize: 15,\n        '& > span': {\n        marginRight: 10,\n        fontSize: 18,\n        },\n    },\n});\n\nconst convertEventParameter = (name, value) => ({\n    target: {\n        name, value\n    }\n})\n\nexport default function CountrySelectInput(props) {\n    const {name, value, onChange, error} = props; \n    const countryClasses = countryUseStyles(); \n    return (\n        <Autocomplete\n            style={{width: 300}}\n            options={countryOptions}\n            classes={{option: countryClasses.option}}\n            autoHighlight\n            getOptionSelected={(option, value) => option.label === value.label}\n            getOptionLabel={(option) => option.label || \"\"}\n            renderOption={(option) => \n                <React.Fragment>\n                    <span>{countryToFlag(option.code)}</span>\n                    {option.label} ({option.code})\n                </React.Fragment>}\n            renderInput={(params) => \n                <TextField\n                    {...params}\n                    label=\"Choose a country/region\"\n                    variant=\"outlined\"\n                    {...(error) && {error: true, helperText: error}}\n                    inputProps={{\n                        ...params.inputProps,\n                        autoComplete: 'new-password', // disable autocomplete and autofill\n                    }}\n                />}\n            onChange={(e, v) => onChange(convertEventParameter(name, v ? v.label: ''))}\n        />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}